/*!
 * TenoxUI CSS Framework v0.4.23 [ https://tenoxui.web.app ]
 * copyright (c) 2024 nousantx
 * licensed under MIT [ https://github.com/nousantx/tenoxui/blob/main/LICENSE ]
 */
import property from"./lib/property.js";let Classes;function NewProp(e,t){"string"==typeof e&&Array.isArray(t)?(this[e]=t,"undefined"!=typeof window&&(Classes.push(`[class*="${e}-"]`),document.querySelectorAll(Classes.join(", ")))):console.warn("Invalid arguments for newProp. Please provide a string for name and an array for values.")}"undefined"!=typeof window&&(Classes=Object.keys(property).map((e=>`[class*="${e}-"]`))),NewProp.prototype.tryAdd=function(){this&&0!==Object.keys(this).length?Object.assign(property,this):console.warn("Invalid newProp instance:",this)};export function addType(e,t){if("string"!=typeof e)throw new Error("Types must be a string");if(!Array.isArray(t))throw new Error("Property must be an array");new NewProp(e,t).tryAdd()}function MakeTenoxUI(e){this.element=e,this.styles=property}export default function tenoxui(){if("undefined"!=typeof window){let e=Object.keys(property).map((e=>`[class*="${e}-"]`)),t=document.querySelectorAll(e.join(", "));MakeTenoxUI.prototype.applyStyle=function(e,t,o){const r=this.styles[e];r&&r.forEach((r=>{if("filter"===r){const s=this.element.style[r];this.element.style[r]=s?`${s} ${e}(${t}${o})`:`${e}(${t}${o})`}else if("flex"===r)this.element.style[r]=`1 1 ${t}${o}`;else if("gridRow"===r||"gridColumn"===r||"gridRowStart"===r||"gridColumnStart"===r||"gridRowEnd"===r||"gridColumnEnd"===r)this.element.style[r]=`span ${t}${o}`;else if("grid-row"===e||"grid-col"===e)this.element.style[r]=`repeat(${t}${o}, 1fr)`;else if("auto-grid-row"===e||"auto-grid-col"===e)this.element.style[r]=`repeat(auto-fit, minmax(${t}${o}, 1fr))`;else if(t.startsWith("[")&&t.endsWith("]")){const e=t.slice(1,-1);this.element.style[r]=`var(--${e})`}else this.element.style[r]=`${t}${o}`}))},MakeTenoxUI.prototype.applyStyles=function(e){const t=e.match(/([a-zA-Z]+(?:-[a-zA-Z]+)*)-(-?(?:\d+(\.\d+)?)|(?:[a-zA-Z]+(?:-[a-zA-Z]+)*(?:-[a-zA-Z]+)*)|(?:\[[^\]]+\]))([a-zA-Z%]*)/);if(t){const e=t[1],o=t[2],r=t[4];this.applyStyle(e,o,r)}},MakeTenoxUI.prototype.applyMultiStyles=function(e){e.split(/\s+/).forEach((e=>{this.applyStyles(e)}))},t.forEach((e=>{const t=e.classList,o=new MakeTenoxUI(e);t.forEach((e=>{o.applyStyles(e)}))}))}}export function makeStyle(e,t){const o=(e,t)=>{new MakeTenoxUI(e).applyMultiStyles(t)};if("string"==typeof t){document.querySelectorAll(e).forEach((e=>o(e,t)))}else"object"==typeof t?Object.entries(t).forEach((([e,t])=>{document.querySelectorAll(e).forEach((e=>o(e,t)))})):console.warn(`Invalid styles format for "${e}". Make sure you provide style correctly`)}export function defineProps(e){Object.entries(e).forEach((([e,t])=>{if(Array.isArray(t)){new NewProp(e,t).tryAdd()}else console.warn(`Invalid property values for "${e}". Make sure you provide values as an array.`)}))}export function makeStyles(e){Object.entries(e).forEach((([e,t])=>{makeStyle(e,t)}))}export function moreColor(){const e=(e,t,o,r)=>{const s=e.className.match(t);s&&(e.style[o]=r(s))};let t;"undefined"!=typeof window&&(t=document.querySelectorAll('[class*="bg-"], [class*="tc-"], [class*="border-"]'));const o={bg:"background",tc:"color",border:"borderColor"},r={rgb:e=>`rgb(${e.slice(1,4).join(",")})`,rgba:e=>`rgba(${e.slice(1,5).join(",")})`,hex:e=>`#${e[1]}`};t.forEach((t=>{for(const s in o){for(const n in r){const l=new RegExp(`${s}-${n}\\(([^)]+)\\)`);e(t,l,o[s],r[n])}const n=new RegExp(`${s}-([0-9a-fA-F]{3,6})`);e(t,n,o[s],r.hex)}}))}tenoxui();
//# sourceMappingURL=tui.esm.min.js.map