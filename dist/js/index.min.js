/*!
 *
 * TenoxUI CSS Framework v0.3.0
 *
 * copyright (c) 2023 NOuSantx
 *
 * license: https://github.com/nousantx/tenoxui/blob/main/LICENSE
 *
 */
import property from"./property.js";let Classes=Object.keys(property).map((e=>`[class*="${e}-"]`));let AllClasses=document.querySelectorAll(Classes.join(", "));class newProp{constructor(e,t){if(typeof e!=="string"||!Array.isArray(t)){console.warn("Invalid arguments for newProp. Please provide a string for name and an array for values.");return}this[e]=t;Classes.push(`[class*="${e}-"]`);AllClasses=document.querySelectorAll(Classes.join(", "))}tryAdd(){if(!this||Object.keys(this).length===0){console.warn("Invalid newProp instance:",this);return}Object.assign(property,this)}}export function MakeProp(e,t){if(typeof e!=="string"){throw new Error("Types must be a string")}if(!Array.isArray(t)){throw new Error("Property must be an array")}new newProp(e,t).tryAdd()}class makeTenoxUI{constructor(e){this.element=e;this.styles=property}applyStyle(e,t,s){const o=this.styles[e];if(o){o.forEach((o=>{if(o==="filter"){const r=this.element.style[o];this.element.style[o]=r?`${r} ${e}(${t}${s})`:`${e}(${t}${s})`}else if(o==="flex"){this.element.style[o]=`1 1 ${t}${s}`}else if(o==="gridRow"||o==="gridColumn"||o==="gridRowStart"||o==="gridColumnStart"||o==="gridRowEnd"||o==="gridColumnEnd"){this.element.style[o]=`span ${t}${s}`}else if(e==="grid-row"||e==="grid-col"){this.element.style[o]=`repeat(${t}${s}, 1fr))`}else if(e==="auto-grid-row"||e==="auto-grid-col"){this.element.style[o]=`repeat(auto-fit, minmax(${t}${s}, 1fr))`}else if(t.startsWith("[")&&t.endsWith("]")){const e=t.slice(1,-1);this.element.style[o]=`var(--${e})`}else{this.element.style[o]=`${t}${s}`}}))}}applyStyles(e){const t=e.match(/([a-zA-Z]+(?:-[a-zA-Z]+)*)-(-?(?:\d+(\.\d+)?)|(?:[a-zA-Z]+(?:-[a-zA-Z]+)*(?:-[a-zA-Z]+)*)|(?:\[[^\]]+\]))([a-zA-Z%]*)/);if(t){const e=t[1];const s=t[2];const o=t[4];this.applyStyle(e,s,o)}}applyMultiStyles(e){const t=e.split(/\s+/);t.forEach((e=>{this.applyStyles(e)}))}}export function MakeStyle(e,t){const s=(e,t)=>{const s=new makeTenoxUI(e);s.applyMultiStyles(t)};if(typeof t==="string"){const o=document.querySelectorAll(e);if(o.length===0){console.warn(`No elements found with selector: ${e}`);return}o.forEach((e=>s(e,t)))}else if(typeof t==="object"){Object.entries(t).forEach((([e,t])=>{const o=document.querySelectorAll(e);if(o.length===0){console.warn(`No elements found with selector: ${e}`);return}o.forEach((e=>s(e,t)))}))}else{console.warn(`Invalid styles format for "${e}". Make sure you provide style correctly`)}}export function MultiProps(e){Object.entries(e).forEach((([e,t])=>{if(Array.isArray(t)){const s=new newProp(e,t);s.tryAdd()}else{console.warn(`Invalid property values for "${e}". Make sure you provide values as an array.`)}}))}export function MultiStyles(e){Object.entries(e).forEach((([e,t])=>{MakeStyle(e,t)}))}export default function TenoxUI(){AllClasses.forEach((e=>{const t=e.classList;const s=new makeTenoxUI(e);t.forEach((e=>{s.applyStyles(e)}))}))}TenoxUI();const makeColor=(e,t,s,o)=>{const r=e.className.match(t);if(r){e.style[s]=o(r)}};const colorClass=document.querySelectorAll('[class*="bg-"], [class*="tc-"], [class*="border-"]');const colorTypes={bg:"background",tc:"color",border:"borderColor"};const colorFormats={rgb:e=>`rgb(${e.slice(1,4).join(",")})`,rgba:e=>`rgba(${e.slice(1,5).join(",")})`,hex:e=>`#${e[1]}`};colorClass.forEach((e=>{for(const t in colorTypes){for(const s in colorFormats){const o=new RegExp(`${t}-${s}\\(([^)]+)\\)`);makeColor(e,o,colorTypes[t],colorFormats[s])}const s=new RegExp(`${t}-([0-9a-fA-F]{3,6})`);makeColor(e,s,colorTypes[t],colorFormats["hex"])}}));